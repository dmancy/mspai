/*
    ======================================================================
    ======================================================================
    ==                                                                  ==
    ==  MSPAI:  Modified SPAI algorithm to comupte SParse Approximate   ==
    ==          Invers matrices.                                        ==
    ==                                                                  ==
    ==  Copyright (C)  2007, 2008, 2009 by                              ==
    ==                 Matous Sedlacek <sedlacek@in.tum.de>             ==
    ==                 Chair of Scientific Computing -- Informatics V   ==
    ==                 Technische Universität München                   ==
    ==                                                                  ==
    ==  This file is part of MSPAI.                                     ==
    ==                                                                  ==
    ==  MSPAI is free software: you can redistribute it and/or          ==
    ==  modify it under the terms of the GNU Lesser General Public      ==
    ==  License as published by the Free Software Foundation, either    ==
    ==  version 3 of the License, or (at your option) any later version.==
    ==                                                                  ==
    ==  MSPAI is distributed in the hope that it will be useful,        ==
    ==  but WITHOUT ANY WARRANTY; without even the implied warranty of  ==
    ==  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ==
    ==  GNU Lesser General Public License for more details.             ==
    ==                                                                  ==
    ==  You should have received a copy of the GNU Lesser General       ==
    ==  Public License along with MSPAI.                                ==
    ==  If not, see <http://www.gnu.org/licenses/>.                     ==
    ==                                                                  ==
    ======================================================================
    ======================================================================
*/

template <class T>
Spai_Update_Block<T>::Spai_Update_Block()
{
    // hash = new Hash<T>();
}

template <class T>
Spai_Update_Block<T>::~Spai_Update_Block()
{
}

template <class T>
void Spai_Update_Block<T>::SPAI_Column(Matrix<T>* A,
                                       Matrix<T>*& M,
                                       Matrix<T>* B,
                                       Pattern* P,
                                       Pattern* UP,
                                       Index_Set* U_UP,
                                       const int col,
                                       const double epsilon_param,
                                       const int maxnew_param,
                                       const int max_impr_steps,
                                       Hash_Table<T>* ht,
                                       const int use_mean,
                                       int pre_k_param,
                                       const int pre_max_param,
                                       unsigned int*& bitvec,
                                       unsigned int*& reset_vec)
{
    int m = 0, // y dimension of A_hat
        n = 0, // x dimension of A_hat
        unit_idx = -1,
        nnz = 0; // number of nnz within A_Hat

    double residual_norm = 1.0e+50; // appr. infinity
    double adjust_epsilon;

    T *A_Hat = NULL, *mk_Hat = NULL, *bk_Hat = NULL, *residual_vals = NULL,
      *residual_cache = NULL;
    T* residual_vals_b = M->residual_vals_b_buffer;

    HASH_UPDATE_DATA<T>* hd;

    Spai_Sub<T> o_sub;

    Com_Server<T> o_comm;

    Index_Set *J = NULL, *I = NULL;

    adjust_epsilon = epsilon_param * sqrt((double)A->block_sizes[col]);

    // Initialize hash pointer of Spai_Update_Block
    hash = M->hash_qr_M;

    hd = hash->m_vector[col - M->my_start_idx];

    // QR factorization already stored
    if (hd) {
        Approximative_Solution_Update(A_Hat, M->A_Hat_buffer, M, mk_Hat, I, J,
                                      col, A->block_sizes[col]);
        memcpy(M->mk_Hat_buffer, mk_Hat, I->slen * A->block_sizes[col] * sizeof(T));

        o_sub.Get_Solution_Vals_Scalar(M->mk_Hat_buffer, mk_Hat, M, A, col, J, I->slen);

        o_sub.Get_Solution_Vals_Block(M->mk_Hat_buffer, mk_Hat, M, A, col, J, I->slen);
        o_comm.Insert_Row_Solution_Block(A, M, B, P, UP, col, mk_Hat, J);
        return;
    }

    // J will be filled with the
    // new J values from pattern
    // and will be updated each augmenting
    // step.

    J = M->J_set;

    // Extract pattern from pattern matrix
    // Create the Index Set J
    o_comm.Get_P_Col(A, M, B, P, UP, col, J);

    // step is -1 because the first improvement step is
    // only the static SPAI
    // Drive on communication between pes
    o_comm.Communicate(A, M, B, P, UP);

    // Get those row indices where at least one nnz
    // is available in row. Create Index Set I
    I = o_sub.Get_I_Set(J, A, M, B, P, UP, U_UP, ht, pre_k_param, pre_max_param,
                        bitvec, reset_vec);

    mk_Hat = o_sub.Create_ek_Hat_Block(I, M, I->slen * A->block_sizes[col], col, unit_idx);

    // Create the submatrix A_Hat = A(I;J) and
    // update the index of the unit vector
    A_Hat = o_sub.Create_Submatrix_AHat_Block(
        A, M, B, P, UP, U_UP, J, I, col, m, n, ht, nnz, pre_k_param, pre_max_param);

    // Copy the right hand side vector.
    // This is used for computing the residual
    // vector later
    bk_Hat = M->bk_Hat;
    memcpy(bk_Hat, mk_Hat, I->slen * A->block_sizes[col] * sizeof(double));

    // Computing solution m_k which is stored within
    // mk_Hat.
    Approximative_Solution(A_Hat, M->A_Hat_buffer, M, m, n, mk_Hat, I, J, col,
                           A->block_sizes[col]);

    memcpy(M->mk_Hat_buffer, mk_Hat, I->slen * A->block_sizes[col] * sizeof(T));

    o_sub.Get_Solution_Vals_Scalar(M->mk_Hat_buffer, mk_Hat, M, A, col, J, I->slen);

    // Compue the residual as a scalar matrix
    residual_norm = o_sub.Residual_Norm_Block(M, A_Hat, m, A->block_sizes[col],
                                              n, mk_Hat, bk_Hat, residual_vals);

    // Create Residual cache for the hash table
    residual_cache = o_sub.Copy_Vector(residual_vals, m * A->block_sizes[col]);

    // Store it in the Hash Table
    hd = hash->m_vector[col - M->my_start_idx];
    hd->residual = residual_cache;

    o_sub.Convert_To_Block(M, I, col, residual_vals, residual_vals_b);

    // Inserting solution row into preconditioner
    o_sub.Get_Solution_Vals_Block(M->mk_Hat_buffer, mk_Hat, M, A, col, J, I->slen);
    o_comm.Insert_Row_Solution_Block(A, M, B, P, UP, col, mk_Hat, J);
}

template <class T>
void Spai_Update_Block<T>::Approximative_Solution(T* A_Hat_orig,
                                                  T* A_Hat_of_M,
                                                  Matrix<T>* M,
                                                  int& m,
                                                  int& n,
                                                  T*& mk_Hat,
                                                  const Index_Set* I,
                                                  Index_Set* J,
                                                  const int col,
                                                  const int block_size_col)
{
    int lda = 0, k = 0, info = 0, lwork = 0, one = block_size_col;

    T *A_Hat = NULL, *A_Hat_qr = NULL, *tau = NULL, *work_qr = NULL,
      *work_qt = NULL, *mk_Hat_cache = NULL, *tau_cache = NULL;

    Index_Set *I_cache = NULL, *J_cache = NULL;
    Spai_Sub<T> o_sub;

    const char *SIDE = "L", *UPLO = "U", *TRANS = "",
               *NCHAR = "N"; // upper triangular matrix not transposed

    // Copy A_Hat because lapack routines change input
    // and the original A_Hat is used later as well
    A_Hat = A_Hat_of_M;

    // PetscPrintf(PETSC_COMM_WORLD, "No stored, Col : %d\n", col);
    // Copy A_Hat because lapack routines change input
    // and the original A_Hat is used later as well
    A_Hat = A_Hat_of_M;
    memcpy(A_Hat, A_Hat_orig, m * n * sizeof(T));

    // Make a cache copy
    //        A_Hat_c = o_sub.Copy_Vector(A_Hat_orig, m * n);

    I_cache = I_cache->Copy_Index_Set(I);
    J_cache = J_cache->Copy_Index_Set(J);
    tau = M->Tau_ptr;

    work_qt = M->Work_qt_ptr;
    work_qr = M->Work_qr_ptr;

    // Preprocessing step:
    // Get the optimal lwork value for fastest
    // QR decomposition. See lapack documentation for
    // details.
    lwork = o_sub.Opt_lwork_QRDecomp(A_Hat, m, n);

    // Init lapack values necessary for lapack routines
    o_sub.Init_Lapack_Vals(m, n, k, lda, lwork, &work_qr, &tau);

    // QR decomposition -> Computing :   A_Hat = QR
    o_sub.QR_Decomposition(m, n, A_Hat, lda, tau, work_qr, lwork, info);

    // Creating new array which stores the current qr-factorization
    // of A_Hat. This is necessary because the following lapack
    // routines change A_Hat
    A_Hat_qr = new T[m * n];
    memcpy(A_Hat_qr, A_Hat, m * n * sizeof(T));

    // Creating the tau cache array
    tau_cache = new T[k];
    memcpy(tau_cache, tau, k * sizeof(T));

    // Preprocessing step:
    // Get the optimal lwork value for fastest
    // QT * vector multiplication. See lapack documentation for
    // details.
    lwork = o_sub.Opt_lwork_QTApply(SIDE, m, n, k, one, lda, A_Hat, tau, mk_Hat);

    // Set new work array -> faster than realloc work_qr
    memset(work_qt, 0, lwork * sizeof(T));

    // Computing :   Q^T * e_k_hat
    o_sub.QT_Apply(SIDE, TRANS, m, one, k, A_Hat, lda, tau, mk_Hat, work_qt, lwork, info);

    // Getting the quadratic contingent of the matrix A_hat for
    // both cases:   m x n and n x m
    o_sub.Ectract_Quadratic_Content(A_Hat, m, n);

    // Solving the triangular system:
    // Computing :   R^-1 * (Q^T * e_k_hat)
    o_sub.Solve_Tr_System_Block(UPLO, NCHAR, n, one, I->slen, A_Hat, mk_Hat, info);

    // Make a solution copy and place it into cache
    mk_Hat_cache = o_sub.Copy_Vector(mk_Hat, J->slen);

    // Inserting the current computed data at the last
    // used position into cache.
    hash->Insert_Vec_Data(col, A_Hat_qr, tau_cache, mk_Hat_cache, I_cache, J_cache, n, m);

    return;
}

template <class T>
void Spai_Update_Block<T>::Approximative_Solution_Update(T* A_Hat_orig,
                                                         T* A_Hat_of_M,
                                                         Matrix<T>* M,
                                                         T*& mk_Hat,
                                                         Index_Set*& I,
                                                         Index_Set*& J,
                                                         const int col,
                                                         const int block_size_col)
{
    int lda = 0, k = 0, info = 0, lwork = 0, one = block_size_col,
        unit_idx = -1, m = 0, n = 0;

    bool in_hash = false;

    T *A_Hat = NULL, *A_Hat_c = NULL, *A_Hat_qr = NULL, *tau = NULL,
      *work_qr = NULL, *work_qt = NULL, *mk_Hat_cache = NULL, *tau_cache = NULL;

    Spai_Sub<T> o_sub;

    const char *SIDE = "L", *UPLO = "U", *TRANS = "",
               *NCHAR = "N"; // upper triangular matrix not transposed

    // Copy A_Hat because lapack routines change input
    // and the original A_Hat is used later as well
    A_Hat = A_Hat_of_M;

    HASH_UPDATE_DATA<T>* hd;

    // A_Hat was previously computed
    hd = hash->m_vector[col - M->my_start_idx];

    I = hd->I;
    J = hd->J;

    m = I->slen;
    n = J->slen;

    mk_Hat = M->mk_Hat;
    memcpy(mk_Hat, hd->residual, m * block_size_col * sizeof(T));

    // Add the contribution of delta_A * m_k in the RHS (SPAI Update)
    // o_sub.Add_Contribution_Update_Block(M, I, block_size_col, hd.residual,
    // col);

    mk_Hat = o_sub.Create_ek_Hat_Block(I, M, I->slen * block_size_col, col, unit_idx);

    // PetscPrintf(PETSC_COMM_WORLD, "Extract A, Col : %d\n", col);
    work_qt = M->Work_qt_ptr;
    work_qr = M->Work_qr_ptr;

    o_sub.Init_Lapack_Vals(m, n, k, lda, lwork, &work_qr);

    // Getting previously computed qr factorization of A_hat
    memcpy(A_Hat, hd->A_Hat_qr, m * n * sizeof(T));

    // Getting previously computed tau data
    // memcpy(tau, hd.tau, k * sizeof(T));
    tau = hd->tau;

    // Preprocessing step:
    // Get the optimal lwork value for fastest
    // QT * vector multiplication. See lapack documentation for
    // details.
    lwork = o_sub.Opt_lwork_QTApply(SIDE, m, n, k, one, lda, A_Hat, tau, mk_Hat);

    // Set new work array -> faster than realloc work_qr
    memset(work_qt, 0, lwork * sizeof(T));

    // Computing :   Q^T * e_k_hat
    o_sub.QT_Apply(SIDE, TRANS, m, one, k, A_Hat, lda, tau, mk_Hat, work_qt, lwork, info);

    // Getting the quadratic contingent of the matrix A_hat for
    // both cases:   m x n and n x m
    o_sub.Ectract_Quadratic_Content(A_Hat, m, n);

    // Solving the triangular system:
    // Computing :   R^-1 * (Q^T * e_k_hat)
    o_sub.Solve_Tr_System_Block(UPLO, NCHAR, n, one, I->slen, A_Hat, mk_Hat, info);
}
