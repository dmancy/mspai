/*
    ======================================================================
    ======================================================================
    ==                                                                  ==
    ==  MSPAI:  Modified SPAI algorithm to comupte SParse Approximate   ==
    ==          Invers matrices.                                        ==
    ==                                                                  ==
    ==  Copyright (C)  2007, 2008, 2009 by                              ==
    ==                 Matous Sedlacek <sedlacek@in.tum.de>             ==
    ==                 Chair of Scientific Computing -- Informatics V   ==
    ==                 Technische Universität München                   ==
    ==                                                                  ==
    ==  This file is part of MSPAI.                                     ==
    ==                                                                  ==
    ==  MSPAI is free software: you can redistribute it and/or          ==
    ==  modify it under the terms of the GNU Lesser General Public      ==
    ==  License as published by the Free Software Foundation, either    ==
    ==  version 3 of the License, or (at your option) any later version.==
    ==                                                                  ==
    ==  MSPAI is distributed in the hope that it will be useful,        ==
    ==  but WITHOUT ANY WARRANTY; without even the implied warranty of  ==
    ==  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ==
    ==  GNU Lesser General Public License for more details.             ==
    ==                                                                  ==
    ==  You should have received a copy of the GNU Lesser General       ==
    ==  Public License along with MSPAI.                                ==
    ==  If not, see <http://www.gnu.org/licenses/>.                     ==
    ==                                                                  ==
    ======================================================================
    ======================================================================
*/


template <class T>  int 
Load_Balance<T>::Grab_M_Col(Matrix<T> *A,
                            Matrix<T> *&M,
                            Matrix<T> *B, 
                            Pattern   *P,
                            Pattern   *UP)
{
    int     pe,
            index,
            col;
            
    //Com_Server<T>   o_comm;
    

    // Do I still have local columns to process?
    if (P->next_col < P->my_nbr_cols) 
    {
        pe = P->my_id;
        index = P->next_col;
        col = index + P->start_indices[pe];
        
        // Next column which must be computed
        // This is necessary for the load 
        // balancing mechanism
        P->next_col++;

        return col; // success 
    }
    /*else // look for a column on another pe 
    {
        for (int i = 1; i < P->num_procs; i++) 
        {
            pe = (P->my_id + i) % P->num_procs;
            if (o_comm.Get_M_Col(A, M, B, P, UP, pe, index)) 
            {
                col = index + P->start_indices[pe];
                return col;
            }
        }
    }
*/
    
    // No one has any more columns - failure
    return -1;
}

