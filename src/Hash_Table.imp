/*
    ======================================================================
    ======================================================================
    ==                                                                  ==
    ==  MSPAI:  Modified SPAI algorithm to comupte SParse Approximate   ==
    ==          Invers matrices.                                        ==
    ==                                                                  ==
    ==  Copyright (C)  2007, 2008, 2009 by                              ==
    ==                 Matous Sedlacek <sedlacek@in.tum.de>             ==
    ==                 Chair of Scientific Computing -- Informatics V   ==
    ==                 Technische Universität München                   ==
    ==                                                                  ==
    ==  This file is part of MSPAI.                                     ==
    ==                                                                  ==
    ==  MSPAI is free software: you can redistribute it and/or          ==
    ==  modify it under the terms of the GNU Lesser General Public      ==
    ==  License as published by the Free Software Foundation, either    ==
    ==  version 3 of the License, or (at your option) any later version.==
    ==                                                                  ==
    ==  MSPAI is distributed in the hope that it will be useful,        ==
    ==  but WITHOUT ANY WARRANTY; without even the implied warranty of  ==
    ==  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ==
    ==  GNU Lesser General Public License for more details.             ==
    ==                                                                  ==
    ==  You should have received a copy of the GNU Lesser General       ==
    ==  Public License along with MSPAI.                                ==
    ==  If not, see <http://www.gnu.org/licenses/>.                     ==
    ==                                                                  ==
    ======================================================================
    ======================================================================
*/

template <class T>
Hash_Table<T>::Hash_Table(int size_m)
{
    if (!(size_m % jump)) {
        std::cout << "\n\t  Warning in initializing hash table:" << std::endl;
        std::cout << "\t\t Size of hash table and linear "
                     "rehashing factor are not relative primes!\n"
                  << std::endl;
    }

    size = size_m;

    col_idcs_table = new int*[size];
    row_idcs_table = new int*[size];
    vals_table = new T*[size];
    allocation = new bool[size];
    set_current = new bool[size];

    for (int i = 0; i < size; i++) {
        col_idcs_table[i] = NULL;
        row_idcs_table[i] = NULL;
        vals_table[i] = NULL;
        allocation[i] = false;
        set_current[i] = false;
    }
}

template <class T>
Hash_Table<T>::~Hash_Table()
{
    for (int i = 0; i < size; i++) {
        if (col_idcs_table[i])
            delete[] col_idcs_table[i];
        if (row_idcs_table[i])
            delete[] row_idcs_table[i];
        if (vals_table[i])
            delete[] vals_table[i];
    }
    delete[] col_idcs_table;
    delete[] row_idcs_table;
    delete[] vals_table;
    delete[] allocation;
    delete[] set_current;
}

template <class T>
bool Hash_Table<T>::Insert(
    int idx, int* col_idcs_buf, int* row_idcs_buf, T* col_buf, int max_buf, int col_len, int row_len)
{
    int loc, *htcol_idcs_buf, *htrow_idcs_buf;
    bool alloc = false;

    T* htvals_buf;

    // If user does not want to use hash table
    // no look up has to be performed.
    // This may only occur if user set -hs 0
    if (!this)
        return false;

    loc = Find_Location(idx);
    alloc = allocation[loc];

    // The column/row indices arrays have 2 elements more
    // because into first position the index of the
    // column/row is inserted, and on second position
    // there is the length of the column/row

    if (!(alloc))
        htcol_idcs_buf = new int[max_buf + 2];
    else
        htcol_idcs_buf = col_idcs_table[loc];

    htcol_idcs_buf[0] = idx;
    htcol_idcs_buf[1] = col_len;
    memcpy(&htcol_idcs_buf[2], col_idcs_buf, col_len * sizeof(int));
    col_idcs_table[loc] = htcol_idcs_buf;

    if (!(alloc))
        htrow_idcs_buf = new int[max_buf + 2];
    else
        htrow_idcs_buf = row_idcs_table[loc];

    htrow_idcs_buf[0] = idx;
    htrow_idcs_buf[1] = row_len;
    memcpy(&htrow_idcs_buf[2], row_idcs_buf, row_len * sizeof(int));
    row_idcs_table[loc] = htrow_idcs_buf;

    if (!(alloc))
        htvals_buf = new T[max_buf];
    else
        htvals_buf = vals_table[loc];

    memcpy(htvals_buf, col_buf, col_len * sizeof(T));
    vals_table[loc] = htvals_buf;

    allocation[loc] = true;
    set_current[loc] = true;

    return true;
}

template <class T>
bool Hash_Table<T>::Insert_Block(int idx,
                                 int* col_idcs_buf,
                                 int* row_idcs_buf,
                                 T* col_buf,
                                 int max_buf_idcs,
                                 int max_buf_vals,
                                 int col_len,
                                 int scalar_len,
                                 int row_len)
{
    int loc, *htcol_idcs_buf, *htrow_idcs_buf;

    bool alloc = false;

    T* htvals_buf;

    // If user does not want to use hash table
    // no look up has to be performed.
    // This may only occur if user set -hs 0
    if (!this)
        return false;

    loc = Find_Location(idx);

    alloc = allocation[loc];

    // The column/row indices arrays have 2 elements more
    // because into first position the index of the
    // column/row is inserted, and on second position
    // there is the length of the column/row

    if (!(alloc))
        htcol_idcs_buf = new int[max_buf_idcs + 2];
    else
        htcol_idcs_buf = col_idcs_table[loc];

    htcol_idcs_buf[0] = idx;
    htcol_idcs_buf[1] = col_len;
    memcpy(&htcol_idcs_buf[2], col_idcs_buf, col_len * sizeof(int));
    col_idcs_table[loc] = htcol_idcs_buf;

    if (!(alloc))
        htrow_idcs_buf = new int[max_buf_idcs + 2];
    else
        htrow_idcs_buf = row_idcs_table[loc];

    htrow_idcs_buf[0] = idx;
    htrow_idcs_buf[1] = row_len;
    memcpy(&htrow_idcs_buf[2], row_idcs_buf, row_len * sizeof(int));
    row_idcs_table[loc] = htrow_idcs_buf;

    if (!(alloc))
        htvals_buf = new T[max_buf_vals];
    else
        htvals_buf = vals_table[loc];

    memcpy(htvals_buf, col_buf, scalar_len * sizeof(T));
    vals_table[loc] = htvals_buf;

    allocation[loc] = true;
    set_current[loc] = true;

    return true;
}

template <class T>
bool Hash_Table<T>::Look_Up(int idx,
                            int*& col_idcs_buf,
                            int*& row_idcs_buf,
                            T*& col_buf,
                            int& col_len,
                            int& row_len,
                            const int loc)
{
    // Hash table pointer is NUll, return.
    // This can only occur if user does not
    // want to use hash table an set -hs 0
    if (!this)
        return false;

    // found them
    col_idcs_buf = col_idcs_table[loc];
    row_idcs_buf = row_idcs_table[loc];
    col_buf = vals_table[loc];

    col_len = col_idcs_buf[1];
    col_idcs_buf++;
    col_idcs_buf++;

    row_len = row_idcs_buf[1];
    row_idcs_buf++;
    row_idcs_buf++;

    return true;
}

template <class T>
int Hash_Table<T>::Find_Location(int idx)
{
    unsigned long loc;

    int *buf, nbr_tries;

    loc = idx % size;
    nbr_tries = 1;
    buf = col_idcs_table[loc];

    // Looking at loc position, if
    // the buffer is not set this
    // position is free.
    // If set, do linear rehash
    // max. 5 times.

    do {
        if ((buf == NULL) || (set_current[loc]))
            return loc;
        else // linear rehash
        {
            loc += jump;
            loc %= size;
            nbr_tries++;
            buf = col_idcs_table[loc];
        }
    } while (nbr_tries < 5);

    // The 5 jumps are done.
    // Delete what's there and return loc.
    if (buf != NULL) {
        // allocation[loc] = false;
        // delete[] buf;
        // delete[] row_idcs_table[loc];
        // delete[] vals_table[loc];
    }

    return loc;
}

template <class T>
int Hash_Table<T>::Get_Location(int idx)
{
    unsigned long loc;

    int nbr_tries, *buf;

    // Looking at loc position, if
    // the buffer is not set this
    // position is free.
    // If set, do linear rehash
    // as long as hash table size
    // is not exceeded.

    if (!this)
        return -1;
    loc = idx % size;
    nbr_tries = 1;

    do {
        buf = col_idcs_table[loc];
        if (buf == NULL)
            return -1;
        if ((buf[0] == idx) && (set_current[loc]))
            return loc;
        else // linear rehash
        {
            loc += jump;
            loc %= size;
            nbr_tries++;
        }
    } while (nbr_tries < size);

    return -1;
}
template <class T>
void Hash_Table<T>::Reinitialize(void)
{
    for (int i = 0; i < size; i++)
        set_current[i] = false;
}
