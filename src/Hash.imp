/*
    ======================================================================
    ======================================================================
    ==                                                                  ==
    ==  MSPAI:  Modified SPAI algorithm to comupte SParse Approximate   ==
    ==          Invers matrices.                                        ==
    ==                                                                  ==
    ==  Copyright (C)  2007, 2008, 2009 by                              ==
    ==                 Matous Sedlacek <sedlacek@in.tum.de>             ==
    ==                 Chair of Scientific Computing -- Informatics V   ==
    ==                 Technische Universität München                   ==
    ==                                                                  ==
    ==  This file is part of MSPAI.                                     ==
    ==                                                                  ==
    ==  MSPAI is free software: you can redistribute it and/or          ==
    ==  modify it under the terms of the GNU Lesser General Public      ==
    ==  License as published by the Free Software Foundation, either    ==
    ==  version 3 of the License, or (at your option) any later version.==
    ==                                                                  ==
    ==  MSPAI is distributed in the hope that it will be useful,        ==
    ==  but WITHOUT ANY WARRANTY; without even the implied warranty of  ==
    ==  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ==
    ==  GNU Lesser General Public License for more details.             ==
    ==                                                                  ==
    ==  You should have received a copy of the GNU Lesser General       ==
    ==  Public License along with MSPAI.                                ==
    ==  If not, see <http://www.gnu.org/licenses/>.                     ==
    ==                                                                  ==
    ======================================================================
    ======================================================================
*/


// file includings
#include "Hash.h"


//QT/C++ includings
#include <iostream>



template <class T>
Hash<T>::~Hash()
{
    typename hash_map<Key, HASH_DATA<T>, HASH_FUNCTION>::iterator it;
    
    std::pair< Key, HASH_DATA<T> > hp;
    HASH_DATA<T> hd;    
    for(it = m_hash_map.begin(); it != m_hash_map.end(); it++)
    {
        hp = *it;
        hd = hp.second;
        
        delete [] hd.A_Hat_qr;
        delete [] hd.mk_Hat;
        delete [] hd.tau;
        delete [] hd.A_Hat;
    }
}



template <class T>  void
Hash<T>::Insert_Hash_Data(Key key, 
                          T* A_Hat_qr, 
                          T* tau,
                          T* mk_Hat, 
                          Key key_bk_Hat,
                          T* A_Hat,
                          int n,
                          int m)
{
    struct HASH_DATA<T> hd;
    hd.A_Hat_qr     = A_Hat_qr;
    hd.tau          = tau;
    hd.mk_Hat       = mk_Hat;
    hd.key_bk_Hat   = key_bk_Hat;   
    hd.A_Hat        = A_Hat;
    hd.n            = n;
    hd.m            = m;
  
    const Key kp(key); 
    m_hash_map.insert(std::pair< Key, HASH_DATA<T> >(kp, hd));
}



template <class T>  void 
Hash<T>::Print_Specific_Hash_Data(Key kp)
{
    struct HASH_DATA<T> hd = m_hash_map[kp];
    
    Spai_Sub<T>         o_sub;
    
    
    double* A_hat_qr = hd.A_hat_qr;   
    double* tau = hd.tau;
    double* m_k_hat = hd.m_k_hat;
        
    std::cout << "\t=========================" << std::endl;
    std::cout << "\tKey: " << kp << std::endl;
    o_sub.Print_A_Hat(hd.A_Hat, hd.n, hd.m );
    o_sub.Print_A_Hat(hd.mk_Hat, hd.n, 1);
    o_sub.Print_A_Hat(hd.A_Hat_qr, hd.n, hd.m );
    std::cout << "" << std::endl;
}



template <class T>  void 
Hash<T>::Print_Full_Hash()
{
    typename hash_map<Key, HASH_DATA<T>, HASH_FUNCTION>::iterator it;
    
    std::cout << "\tPRINTING NEW HASH             " << std::endl;
    std::cout << "\tHashsize: " << m_hash_map.size() << "\n" << std::endl;
    
    for(it = m_hash_map.begin(); it != m_hash_map.end(); it++)
        Print_Specific_Hash_Data(it->first);   
}



template <class T>  const hash_map<Key, HASH_DATA<T>, HASH_FUNCTION>& 
Hash<T>::Get_Hash_Map() const
{
    return m_hash_map;   
}



template <class T>  int
Hash<T>::Get_Hash_Size()
{
    return m_hash_map.size();    
}



template <class T>  inline Key 
Hash<T>::Hash_Double(double x)
{ 
    //Take care: Reinterpret casting very dangerously!
    //In my case under gcc 3.4 this was ok - test your
    //compiler if problems will occur. 
    //  U_Int64* p = reinterpret_cast< U_Int64* > (&x); 
    //  return *p ^ (*p >> 32); 
    
    //Under gcc 4.1.3 the above code does not work any more.
    //This one should do the same.
    Key p[2];
    memcpy( p, &x, sizeof p );
    return p[0] ^ p[1];
}
