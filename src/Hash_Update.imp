/*
    ======================================================================
    ======================================================================
    ==                                                                  ==
    ==  MSPAI:  Modified SPAI algorithm to comupte SParse Approximate   ==
    ==          Invers matrices.                                        ==
    ==                                                                  ==
    ==  Copyright (C)  2007, 2008, 2009 by                              ==
    ==                 Matous Sedlacek <sedlacek@in.tum.de>             ==
    ==                 Chair of Scientific Computing -- Informatics V   ==
    ==                 Technische Universität München                   ==
    ==                                                                  ==
    ==  This file is part of MSPAI.                                     ==
    ==                                                                  ==
    ==  MSPAI is free software: you can redistribute it and/or          ==
    ==  modify it under the terms of the GNU Lesser General Public      ==
    ==  License as published by the Free Software Foundation, either    ==
    ==  version 3 of the License, or (at your option) any later version.==
    ==                                                                  ==
    ==  MSPAI is distributed in the hope that it will be useful,        ==
    ==  but WITHOUT ANY WARRANTY; without even the implied warranty of  ==
    ==  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ==
    ==  GNU Lesser General Public License for more details.             ==
    ==                                                                  ==
    ==  You should have received a copy of the GNU Lesser General       ==
    ==  Public License along with MSPAI.                                ==
    ==  If not, see <http://www.gnu.org/licenses/>.                     ==
    ==                                                                  ==
    ======================================================================
    ======================================================================
*/

// file includings
#include "Hash_Update.h"

// QT/C++ includings
#include <iostream>

template <class T>
Hash_Update<T>::~Hash_Update()
{
    Initialize();
}

template <class T>
Hash_Update<T>::Hash_Update(int size)
{
    m_vector.reserve(size);
}

template <class T>
void Hash_Update<T>::Initialize()
{
    HASH_UPDATE_DATA<T>* hd;
    for (unsigned int i = 0; i < m_vector.capacity(); i++) {
        hd = m_vector[i];
        if (hd) {
            delete[] hd->A_Hat_qr;
            hd->A_Hat_qr = NULL;

            delete[] hd->mk_Hat;
            hd->mk_Hat = NULL;

            delete[] hd->tau;
            hd->tau = NULL;

            delete hd->I;
            hd->I = NULL;

            delete hd->J;
            hd->J = NULL;

            if (hd->residual)
                delete[] hd->residual;
            hd->residual = NULL;

            delete hd;

            m_vector[i] = NULL;
        }
    }
}

template <class T>
void Hash_Update<T>::Insert_Vec_Data(
    int pos, T* A_Hat_qr, T* tau, T* mk_Hat, Index_Set* I, Index_Set* J, int n, int m)
{
    struct HASH_UPDATE_DATA<T>* hd = new HASH_UPDATE_DATA<T>;
    hd->A_Hat_qr = A_Hat_qr;
    hd->tau = tau;
    hd->mk_Hat = mk_Hat;
    hd->key_bk_Hat = 0;
    hd->n = n;
    hd->m = m;
    hd->I = I;
    hd->J = J;
    hd->residual = NULL;

    m_vector[pos] = hd;
}

template <class T>
const std::vector<HASH_UPDATE_DATA<T>*>& Hash_Update<T>::Get_Vec() const
{
    return m_vector;
}
