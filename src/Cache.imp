/*
    ======================================================================
    ======================================================================
    ==                                                                  ==
    ==  MSPAI:  Modified SPAI algorithm to comupte SParse Approximate   ==
    ==          Invers matrices.                                        ==
    ==                                                                  ==
    ==  Copyright (C)  2007, 2008, 2009 by                              ==
    ==                 Matous Sedlacek <sedlacek@in.tum.de>             ==
    ==                 Chair of Scientific Computing -- Informatics V   ==
    ==                 Technische Universität München                   ==
    ==                                                                  ==
    ==  This file is part of MSPAI.                                     ==
    ==                                                                  ==
    ==  MSPAI is free software: you can redistribute it and/or          ==
    ==  modify it under the terms of the GNU Lesser General Public      ==
    ==  License as published by the Free Software Foundation, either    ==
    ==  version 3 of the License, or (at your option) any later version.==
    ==                                                                  ==
    ==  MSPAI is distributed in the hope that it will be useful,        ==
    ==  but WITHOUT ANY WARRANTY; without even the implied warranty of  ==
    ==  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   ==
    ==  GNU Lesser General Public License for more details.             ==
    ==                                                                  ==
    ==  You should have received a copy of the GNU Lesser General       ==
    ==  Public License along with MSPAI.                                ==
    ==  If not, see <http://www.gnu.org/licenses/>.                     ==
    ==                                                                  ==
    ======================================================================
    ======================================================================
*/

template <class T>
Cache<T>::Cache(const int dimension)
{
    m_dimension = dimension;
    m_cache_key = 0;
}

template <class T>
Cache<T>::~Cache()
{
    typename std::list<std::pair<Key, CACHE_DATA<T>>>::iterator pos;

    for (pos = m_cache.begin(); pos != m_cache.end(); ++pos)
        Delete_Element_Data(*pos);
}

template <class T>
void Cache<T>::Delete_Element_Data(std::pair<Key, CACHE_DATA<T>> cp)
{
    struct CACHE_DATA<T> cd;
    cd = cp.second;

    if (cd.A_Hat_qr)
        delete[] cd.A_Hat_qr;
    if (cd.tau)
        delete[] cd.tau;
    if (cd.mk_Hat)
        delete[] cd.mk_Hat;
    if (cd.A_Hat)
        delete[] cd.A_Hat;
}

template <class T>
void Cache<T>::Insert_Cache_Data_LRU(
    Key key, T* A_Hat_qr, T* tau, T* mk_Hat, Key key_bk_Hat, T* A_Hat, int n, int m)
{
    struct CACHE_DATA<T> cd;

    cd.A_Hat_qr = A_Hat_qr;
    cd.tau = tau;
    cd.mk_Hat = mk_Hat;
    cd.key_bk_Hat = key_bk_Hat;
    cd.A_Hat = A_Hat;
    cd.m = m;
    cd.n = n;

    if (m_cache.size() < m_dimension)
        m_cache.push_front(std::pair<Key, CACHE_DATA<T>>(key, cd));
    else // cache is full, remove last element
    {
        std::pair<Key, CACHE_DATA<T>> cp = m_cache.back();
        Delete_Element_Data(cp);
        m_cache.pop_back();
        m_cache.push_front(std::pair<Key, CACHE_DATA<T>>(key, cd));
    }
}

template <class T>
bool Cache<T>::In_Cache(const Key pattern_key)
{
    typename std::list<std::pair<Key, CACHE_DATA<T>>>::iterator pos;

    for (pos = m_cache.begin(); pos != m_cache.end(); ++pos)
        if (pattern_key == (*pos).first) {
            m_cache.push_front(*pos);
            m_cache.erase(pos);
            return true;
        }

    return false;
}

template <class T>
bool Cache<T>::In_Cache_By_Superkey(const Key pattern_key)
{
    return (m_cache_key == (m_cache_key | pattern_key));
}

template <class T>
void Cache<T>::Print_Key_Binary(const Key key)
{
    std::bitset<32> bits(key);
    std::cout << bits << std::endl;
}

template <class T>
void Cache<T>::Update_Cache_Key()
{
    // Updating the cache key is just the ORing
    // between all cache elements.
    std::pair<Key, CACHE_DATA<T>> cp;
    m_cache_key = 0;
    for (int i = 0; i < m_dimension; i++) {
        cp = m_cache[i];
        m_cache_key |= cp.first;
    }
}

template <class T>
std::pair<Key, CACHE_DATA<T>> Cache<T>::Get_Cache_Element() const
{
    return *m_cache.begin();
}

template <class T>
void Cache<T>::Print_Cache()
{
    std::pair<Key, CACHE_DATA<T>> cp;

    CACHE_DATA<T> cd;

    Spai_Sub<T> o_sub;

    typename std::list<std::pair<Key, CACHE_DATA<T>>>::iterator pos;

    std::cout << "\tPRINTING NEW CACHE             " << std::endl;
    std::cout << "\tCachesize: " << m_cache.size() << "\n" << std::endl;

    for (pos = m_cache.begin(); pos != m_cache.end(); ++pos) {
        cp = *pos;
        cd = cp.second;

        std::cout << "=========================" << std::endl;
        o_sub.Print_A_Hat(cd.A_Hat, cd.n, cd.m);
        o_sub.Print_A_Hat(cd.mk_Hat, cd.n, 1);
        o_sub.Print_A_Hat(cd.A_Hat_qr, cd.n, cd.m);
        std::cout << "" << std::endl;
    }
}

template <class T>
inline Key Cache<T>::Hash_Double(double x)
{
    // Take care: Reinterpret casting very dangerously!
    // In my case under gcc 3.4 this was ok - test your
    // compiler if problems will occur.
    //  U_Int64* p = reinterpret_cast< U_Int64* > (&x);
    //  return *p ^ (*p >> 32);

    // Under gcc 4.1.3 the above code does not work any more.
    // This one should do the same.
    Key p[2];
    memcpy(p, &x, sizeof p);
    return p[0] ^ p[1];
}
